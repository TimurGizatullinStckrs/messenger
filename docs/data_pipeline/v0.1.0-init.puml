@startuml
participant Frontend
participant Backend
participant Postgres
participant Redis


== WS connection ==
Frontend -> Backend: WS: api/ws/chat/{id}/connect
Backend -> Backend: create group "chat/id"
Backend --> Frontend: WS: ok

== get chats with last message==
Frontend -> Backend: HTTP GET: /api/chats/ (auth_token)
Backend -> Postgres: PSQL: Get user by token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chats by user.id
Postgres --> Backend: PSQL: chats (contains last_msg)
Backend --> Frontend: HTTP: chats with last message


== Create chat ==
Frontend -> Backend: HTTP POST: /api/chats/ (user_id + auth_token)
Backend -> Postgres: PSQL: get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get chats by user.id where chat.is_dialog is true and chats doesn't contains companion user

alt chat exists
Postgres --> Backend: PSQL: chats
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: None
Backend -> Postgres: PSQL: create new chat
Postgres --> Backend: PSQL: chat
Backend --> Frontend: HTTP: chat


== Get messages with pagination ==
Frontend -> Backend: HTTP GET: /api/chats/{id}/messages/ (auth_token + limit + offset)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --> Backend: PSQL: Not found
Backend --> Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get messages by id with limit offset pagination filter
Postgres --> Backend: PSQL: messages
Backend --> Frontend: messages


== Add message to chat with real-time updating==
Frontend -> Backend: HTTP POST: /api/chat/{id}/ (text + pic + reply_to) (auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Backend: Check if text or pic not None

alt text and pic is None
Backend --x Frontend: HTTP: 400
end alt

Backend -> Postgres: PSQL: get chat by id
Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: insert new message to chat
Postgres --> Backend: PSQL: message
Backend -> Frontend: WS: "chat/id" group (new_message + messages)
Backend --> Frontend: HTTP: 201


== Delete Message ==
Frontend -> Backend: HTTP DELETE: /api/messages/{id}/ (auth_token + chat_id)
Backend -> Postgres: PSQL: get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Delete message by id
Postgres --> Backend: PSQL: ok
Backend -> Frontend: WS: "chat/chat_id" group (messages)
Backend --> Frontend: HTTP: 204


== Forward message ==
Frontend -> Backend: HTTP POST: /api/messages/forward/ (message_ids + forward_to_id + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get messages by id using id__in(message_ids)
Postgres --> Backend: PSQL: messages_to_forward
loop for message in messages_to_forward
Backend -> Backend: message.forward_by = user.id and clean id or copy obj
end loop
Backend -> Postgres: PSQL: get dialog by forward_to_id
Postgres --> Backend: PSQL: dialog
Backend -> Postgres: PSQL: Insert new_message
Postgres --> Backend: PSQL: message
Backend -> Frontend: WS: "chat/forward_to_id" group (new_message + messages)
Backend --> Frontend: HTTP: 201

== Registration ==
Frontend -> Backend: HTTP POST: /api/auth/sign_up/ (registration_model)
Backend -> Postgres: PSQL: Get user by registration_model.email

alt User with similar email exists
Postgres --x Backend: PSQL: User
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: PSQL: None
Backend -> Postgres: PSQL: Insert new_user
Postgres --> Backend: PSQL: new_user
Backend --> Frontend: HTTP: new_user


== login ==
Frontend -> Backend: HTTP POST: /api/auth/login/ (login_model)
Backend -> Postgres: PSQL: Get user by login_model.email
Postgres --> Backend: PSQL: user_data_to_compare
Backend -> Backend: Compare data from Frontend and Postgres

alt data is not similar
Backend --x Frontend: HTTP: 400
end alt

Backend --> Frontend: HTTP: Token


== Get users with pagination ==
Frontend -> Backend: HTTP GET: /api/users/ (limit + offset + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get users on limit + offset filter
Postgres --> Backend: PSQL:users
Backend --> Frontend: users

== Find user ==
Frontend -> Backend: HTTP GET: /api/users/ (user_to_find + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get user with filter string__contains = 'user_to_find'
Postgres --> Backend: PSQL: user
Backend --> Frontend: HTTP: user


== Upload profile pic ==
Frontend -> Backend: HTTP PATCH: /api/users/{id}/ (pic_to_upload + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user

Backend -> Backend: Save pic_to_upload to media set path to user.pic
Backend -> Postgres: PSQL: Update entity
Postgres --> Backend: PSQL OK
Backend --> Frontend: HTTP: 204
@enduml